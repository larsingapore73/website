(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{495:function(e,t,s){"use strict";s.r(t);var a=s(1),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"extension-guide"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extension-guide"}},[e._v("#")]),e._v(" Extension Guide")]),e._v(" "),s("p",[e._v("Frictionless is built on top of a powerful plugins system which is used internally and allows to extend the framework.")]),e._v(" "),s("h2",{attrs:{id:"plugin-interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plugin-interface"}},[e._v("#")]),e._v(" Plugin Interface")]),e._v(" "),s("p",[e._v("Here is a list of available hooks that you can implement in your plugin:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("create_check")])]),e._v(" "),s("li",[s("code",[e._v("create_control")])]),e._v(" "),s("li",[s("code",[e._v("create_dialect")])]),e._v(" "),s("li",[s("code",[e._v("create_loader")])]),e._v(" "),s("li",[s("code",[e._v("create_parser")])]),e._v(" "),s("li",[s("code",[e._v("create_server")])])]),e._v(" "),s("p",[e._v("To create a plugin you need:")]),e._v(" "),s("ul",[s("li",[e._v("create a module called "),s("code",[e._v("frictionless_<name>")]),e._v(" available in PYTHONPATH")]),e._v(" "),s("li",[e._v("subclass the Plugin class and override one of the methods above")])]),e._v(" "),s("p",[e._v("Please consult with “API Reference” for in-detail information about the Plugin interface and how these methods can be implemented.")]),e._v(" "),s("h2",{attrs:{id:"plugin-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plugin-example"}},[e._v("#")]),e._v(" Plugin Example")]),e._v(" "),s("p",[e._v("Let’s say we’re interested in supporting the "),s("code",[e._v("csv2k")]),e._v(" format that we have just invented. For simplicity, let’s use a format that is exactly the same with CSV.")]),e._v(" "),s("p",[e._v("First of all, we need to create a "),s("code",[e._v("frictionless_csv2k")]),e._v(" module containing a Plugin implementation and a Parser implementation but we’re going to re-use the CsvParser as our new format is the same:")]),e._v(" "),s("blockquote",[s("p",[e._v("frictionless_csv2k.py")])]),e._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" frictionless "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Plugin\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" frictionless"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("csv "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" CsvParser\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Csv2kPlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Plugin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("create_parser")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("format")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"csv2k"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" Csv2kParser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Csv2kParser")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CsvParser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pass")]),e._v("\n")])])]),s("p",[e._v("Now, we can use our new format in any of the Frictionless functions that accept a table source, for example, "),s("code",[e._v("extract")]),e._v(" or "),s("code",[e._v("Table")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" frictionless "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" extract\n\nrows "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" extract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'data/table.csv2k'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("This example is over-simplified to show the high-level mechanics but writing Frictionless Plugins is designed to be easy. For inspiration, you can checks the "),s("code",[e._v("frictionless/plugins")]),e._v(" directory and learn from real-life examples. Also, in the Frictionless codebase there are many "),s("code",[e._v("Check")]),e._v(", "),s("code",[e._v("Control")]),e._v(", "),s("code",[e._v("Dialect")]),e._v(", "),s("code",[e._v("Loader")]),e._v(", "),s("code",[e._v("Parser")]),e._v(", and "),s("code",[e._v("Server")]),e._v(" implementations - you can read their code for better understanding of how to write your own subclass or reach out to us for support.")])])}),[],!1,null,null,null);t.default=n.exports}}]);